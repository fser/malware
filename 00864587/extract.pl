#!/usr/bin/env perl

use strict;
use warnings;
# sed -i 's/function//' <<filename>>
my $file = '00864587.doc.js';
my $state = 0;  # 0 init - 1 function name - 2 { - 3 c - 4 d - 5 call - 6 }
my %functions = ();
my %current_fun = ('name', undef, 'd', undef, 'c', undef, 'next', undef);
open(my $fh, "<$file") or die("Error opening $file: $@");

while (<$fh>)
{
    next if (/^\s*$/); # skip blank lines
    next if (/^var/);  # skip var declaration
    if (/^(\w+)\s\(\s*\)/) 
    {
        $state = 1;
        $current_fun{name} = $1;
    } 
    elsif (/^\s*\{\s*$/)
    {
        $state = 2;
    }
    elsif (/^\s*c\s*\+?=\s*\'([^']+)/)
    {
        $state = 3;
        $current_fun{c} = $1;
    }
    elsif (/^\s*d \+?= '([^']+)/)
    {
        $state = 4;
        $current_fun{d} = $1;
    }
    elsif (/(\w+) \(\);/)
    {
        $state = 5;
        $current_fun{next} = $1;
    }
    elsif (/^\s*\};\s*$/)
    {
        $state = 6;
        $functions{$current_fun{name}} = {c => $current_fun{c}, d => $current_fun{d}, next => $current_fun{next}};
    }
    else
    {
        s/[\r\n]+//;
        print "unmatch \"$_\" in $current_fun{name}\n";
    }
}
close ($fh);

print "Entry point is qk() :\n";
my $cur = 'qk';
my $c = '';
my $d = '';
while (defined($functions{$cur}))
{
    # obviously there's a loop
    last if $cur eq 'jir';
    $c .= $functions{$cur}{c};
    $d .= $functions{$cur}{d};
    $cur = $functions{$cur}{next};
}
print "c = $c\nd = $d\n";
